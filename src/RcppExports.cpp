// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// genotyping_error_model
double genotyping_error_model(const arma::uvec& phenotype, const unsigned& genotype0, const unsigned& genotype1, const unsigned& number_of_alleles, const double& dropout_rate, const double& mistyping_rate);
RcppExport SEXP _sydneyPaternity_genotyping_error_model(SEXP phenotypeSEXP, SEXP genotype0SEXP, SEXP genotype1SEXP, SEXP number_of_allelesSEXP, SEXP dropout_rateSEXP, SEXP mistyping_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type phenotype(phenotypeSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type genotype0(genotype0SEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type genotype1(genotype1SEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type number_of_alleles(number_of_allelesSEXP);
    Rcpp::traits::input_parameter< const double& >::type dropout_rate(dropout_rateSEXP);
    Rcpp::traits::input_parameter< const double& >::type mistyping_rate(mistyping_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(genotyping_error_model(phenotype, genotype0, genotype1, number_of_alleles, dropout_rate, mistyping_rate));
    return rcpp_result_gen;
END_RCPP
}
// genotyping_error_model_class
int genotyping_error_model_class(const arma::uvec& phenotype, const unsigned& genotype0, const unsigned& genotype1);
RcppExport SEXP _sydneyPaternity_genotyping_error_model_class(SEXP phenotypeSEXP, SEXP genotype0SEXP, SEXP genotype1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type phenotype(phenotypeSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type genotype0(genotype0SEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type genotype1(genotype1SEXP);
    rcpp_result_gen = Rcpp::wrap(genotyping_error_model_class(phenotype, genotype0, genotype1));
    return rcpp_result_gen;
END_RCPP
}
// simulate_genotyping_errors
arma::uvec simulate_genotyping_errors(const arma::uvec& phenotype, const unsigned& genotype0, const unsigned& genotype1, const unsigned& number_of_alleles, const double& dropout_rate, const double& mistyping_rate);
RcppExport SEXP _sydneyPaternity_simulate_genotyping_errors(SEXP phenotypeSEXP, SEXP genotype0SEXP, SEXP genotype1SEXP, SEXP number_of_allelesSEXP, SEXP dropout_rateSEXP, SEXP mistyping_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type phenotype(phenotypeSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type genotype0(genotype0SEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type genotype1(genotype1SEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type number_of_alleles(number_of_allelesSEXP);
    Rcpp::traits::input_parameter< const double& >::type dropout_rate(dropout_rateSEXP);
    Rcpp::traits::input_parameter< const double& >::type mistyping_rate(mistyping_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_genotyping_errors(phenotype, genotype0, genotype1, number_of_alleles, dropout_rate, mistyping_rate));
    return rcpp_result_gen;
END_RCPP
}
// sample_error_rates_given_paternity
Rcpp::List sample_error_rates_given_paternity(arma::ucube phenotypes, arma::uvec paternity, const unsigned mother, const unsigned number_of_mcmc_samples, const unsigned global_genotyping_error_rates, const bool random_allele_frequencies);
RcppExport SEXP _sydneyPaternity_sample_error_rates_given_paternity(SEXP phenotypesSEXP, SEXP paternitySEXP, SEXP motherSEXP, SEXP number_of_mcmc_samplesSEXP, SEXP global_genotyping_error_ratesSEXP, SEXP random_allele_frequenciesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ucube >::type phenotypes(phenotypesSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type paternity(paternitySEXP);
    Rcpp::traits::input_parameter< const unsigned >::type mother(motherSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type number_of_mcmc_samples(number_of_mcmc_samplesSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type global_genotyping_error_rates(global_genotyping_error_ratesSEXP);
    Rcpp::traits::input_parameter< const bool >::type random_allele_frequencies(random_allele_frequenciesSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_error_rates_given_paternity(phenotypes, paternity, mother, number_of_mcmc_samples, global_genotyping_error_rates, random_allele_frequencies));
    return rcpp_result_gen;
END_RCPP
}
// missing_data_problem
arma::imat missing_data_problem(arma::imat input);
RcppExport SEXP _sydneyPaternity_missing_data_problem(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(missing_data_problem(input));
    return rcpp_result_gen;
END_RCPP
}
// paternity_loglikelihood
double paternity_loglikelihood(arma::uvec paternity, arma::ucube offspring_phenotypes, arma::umat maternal_phenotype, std::vector<arma::vec> allele_frequencies, arma::vec dropout_rate, arma::vec mistyping_rate);
RcppExport SEXP _sydneyPaternity_paternity_loglikelihood(SEXP paternitySEXP, SEXP offspring_phenotypesSEXP, SEXP maternal_phenotypeSEXP, SEXP allele_frequenciesSEXP, SEXP dropout_rateSEXP, SEXP mistyping_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type paternity(paternitySEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type offspring_phenotypes(offspring_phenotypesSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type maternal_phenotype(maternal_phenotypeSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::vec> >::type allele_frequencies(allele_frequenciesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type dropout_rate(dropout_rateSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mistyping_rate(mistyping_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(paternity_loglikelihood(paternity, offspring_phenotypes, maternal_phenotype, allele_frequencies, dropout_rate, mistyping_rate));
    return rcpp_result_gen;
END_RCPP
}
// optimize_paternity_given_error_rates
Rcpp::List optimize_paternity_given_error_rates(arma::ucube phenotypes, arma::vec dropout_rate, arma::vec mistyping_rate, const unsigned mother);
RcppExport SEXP _sydneyPaternity_optimize_paternity_given_error_rates(SEXP phenotypesSEXP, SEXP dropout_rateSEXP, SEXP mistyping_rateSEXP, SEXP motherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ucube >::type phenotypes(phenotypesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type dropout_rate(dropout_rateSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mistyping_rate(mistyping_rateSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type mother(motherSEXP);
    rcpp_result_gen = Rcpp::wrap(optimize_paternity_given_error_rates(phenotypes, dropout_rate, mistyping_rate, mother));
    return rcpp_result_gen;
END_RCPP
}
// loglikelihood_of_error_rates_given_paternity
arma::mat loglikelihood_of_error_rates_given_paternity(arma::ucube phenotypes, arma::uvec paternity, arma::mat grid_of_error_rates, const unsigned mother);
RcppExport SEXP _sydneyPaternity_loglikelihood_of_error_rates_given_paternity(SEXP phenotypesSEXP, SEXP paternitySEXP, SEXP grid_of_error_ratesSEXP, SEXP motherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ucube >::type phenotypes(phenotypesSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type paternity(paternitySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grid_of_error_rates(grid_of_error_ratesSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type mother(motherSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikelihood_of_error_rates_given_paternity(phenotypes, paternity, grid_of_error_rates, mother));
    return rcpp_result_gen;
END_RCPP
}
// collapse_alleles_and_generate_prior_wrapper
Rcpp::List collapse_alleles_and_generate_prior_wrapper(arma::ucube phenotypes, const unsigned mother, const bool add_unsampled_allele);
RcppExport SEXP _sydneyPaternity_collapse_alleles_and_generate_prior_wrapper(SEXP phenotypesSEXP, SEXP motherSEXP, SEXP add_unsampled_alleleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ucube >::type phenotypes(phenotypesSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type mother(motherSEXP);
    Rcpp::traits::input_parameter< const bool >::type add_unsampled_allele(add_unsampled_alleleSEXP);
    rcpp_result_gen = Rcpp::wrap(collapse_alleles_and_generate_prior_wrapper(phenotypes, mother, add_unsampled_allele));
    return rcpp_result_gen;
END_RCPP
}
// sample_paternity_and_error_rates_from_joint_posterior
Rcpp::List sample_paternity_and_error_rates_from_joint_posterior(arma::ucube phenotypes, const unsigned mother, const unsigned number_of_mcmc_samples, const bool global_genotyping_error_rates);
RcppExport SEXP _sydneyPaternity_sample_paternity_and_error_rates_from_joint_posterior(SEXP phenotypesSEXP, SEXP motherSEXP, SEXP number_of_mcmc_samplesSEXP, SEXP global_genotyping_error_ratesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ucube >::type phenotypes(phenotypesSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type mother(motherSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type number_of_mcmc_samples(number_of_mcmc_samplesSEXP);
    Rcpp::traits::input_parameter< const bool >::type global_genotyping_error_rates(global_genotyping_error_ratesSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_paternity_and_error_rates_from_joint_posterior(phenotypes, mother, number_of_mcmc_samples, global_genotyping_error_rates));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sydneyPaternity_genotyping_error_model", (DL_FUNC) &_sydneyPaternity_genotyping_error_model, 6},
    {"_sydneyPaternity_genotyping_error_model_class", (DL_FUNC) &_sydneyPaternity_genotyping_error_model_class, 3},
    {"_sydneyPaternity_simulate_genotyping_errors", (DL_FUNC) &_sydneyPaternity_simulate_genotyping_errors, 6},
    {"_sydneyPaternity_sample_error_rates_given_paternity", (DL_FUNC) &_sydneyPaternity_sample_error_rates_given_paternity, 6},
    {"_sydneyPaternity_missing_data_problem", (DL_FUNC) &_sydneyPaternity_missing_data_problem, 1},
    {"_sydneyPaternity_paternity_loglikelihood", (DL_FUNC) &_sydneyPaternity_paternity_loglikelihood, 6},
    {"_sydneyPaternity_optimize_paternity_given_error_rates", (DL_FUNC) &_sydneyPaternity_optimize_paternity_given_error_rates, 4},
    {"_sydneyPaternity_loglikelihood_of_error_rates_given_paternity", (DL_FUNC) &_sydneyPaternity_loglikelihood_of_error_rates_given_paternity, 4},
    {"_sydneyPaternity_collapse_alleles_and_generate_prior_wrapper", (DL_FUNC) &_sydneyPaternity_collapse_alleles_and_generate_prior_wrapper, 3},
    {"_sydneyPaternity_sample_paternity_and_error_rates_from_joint_posterior", (DL_FUNC) &_sydneyPaternity_sample_paternity_and_error_rates_from_joint_posterior, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_sydneyPaternity(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
